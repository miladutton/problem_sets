View(performance_hyp_long_d)
?head
tiny_demo_mutate <- head(performance_hyp_long_d, 10)
View(tiny_demo_mutate)
?grepl
performance_hyp_long_d_final = performance_hyp_long_d %>%
performance_hyp_long_d_final = performance_hyp_long_d %>%
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
#WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
#MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
View(performance_hyp_long_d_final)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
#WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
#MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
View(performance_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
#ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
#MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
#ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
#WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
View(performance_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
#ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
#WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
Cond = ifelse(Cond > 3, Cond - 3, Cond),
# Get rid of uninterpretable condition labels
#MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
View(performance_hyp_long_d)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1)
tail(d)
filtered_d = d |>
filter(DoNotUse != 1) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d |>
filter(is.na(DoNotUse))
filtered_d = filtered_d |>
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |>
select(-DoNotUseVideoGamePerformanceData,
-starts_with("Game")) # your code here: remove the columns containing "Game" in the name
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d %>%
## your code here
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Rating')
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
Cond = ifelse(Cond > 3, Cond - 3, Cond),
# Get rid of uninterpretable condition labels
MusicCondition = factor(Cond, levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
View(performance_hyp_long_d)
View(rating_hyp_long_d)
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
IsRecall = grepl("Friends|Strangers", Measurement),## Your code here
)
?substr
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
# Pulls out the game number
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
# We can then use that new GameNumber Column right away
# Games 1 and 2 are confrontational, Games 3 and 4 are not
ConfrontationalGame = GameNumber <= 2,
# Now that we have added the game number and whether it is confrontational elsewhere,
# we can just pull out the emotion! Let's do it in two steps:
# Grab the string of emotions
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
# Clean up annoying labeling using TWO ifelse statements
# The data uses "Excited" and "Exciting" to describe the same music
# Similar with "Calm" and "Neutral"
Emotion = ifelse(Emotion == "Excited", "Exciting",
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
View(performance_hyp_d)
performance_hyp_long_d |>
group_by(ConfrontationalGame) %>%
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) %>%
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) |> # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) |>
ungroup()
rating_summary_d = rating_hyp_long_d %>%
## your code here
group_by(ConfrontationalGame, Emotion) %>%
summarize(
MeanRating = mean(Rating)
)
rating_summary_d
View(rating_summary_d)
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d %>%
# re-label variable so code is easier to read
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
# now we remove columns we don't need (why might this be?)
select(-c("Score", "Measurement")) %>%
pivot_wider(names_from=WithMusic,
values_from=z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_d = performance_hyp_long_d %>%
# re-label variable so code is easier to read
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
# now we remove columns we don't need (why might this be?)
select(-c("Score", "Measurement")) %>%
pivot_wider(names_from=WithMusic,
values_from=z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
View(performance_diff_d)
performance_diff_d |>
ggplot(aes(x=ConfrontationalGame, y=ImprovementScore, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_d |>
ggplot(aes(x=ConfrontationalGame, y=ImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_d |>
ggplot(aes(x=ConfrontationalGame, y=ImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="summary", fun = mean) +
scale_fill_brewer(palette="Set1")
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore))
performance_summary_d |>
ggplot(aes(x=ConfrontationalGame, y=ImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_summary_d |>
ggplot(aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d
performance_summary_d
n <- length(unique(performance_diff_d$Subject))
n_subj <- length(unique(performance_diff_d$Subject))
performance_summary_d = performance_diff_d |>
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore),
SE = sd(ImprovementScore)/n_subj)
performance_summary_d
?geom_errorbar
performance_summary_d |>
ggplot(aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin=MeanImprovementScore-SE, ymax=MeanImprovementScore+SE), width=.2,
position=position_dodge(.9))
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1)
filtered_d = filtered_d |>
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
View(d)
View(d)
head(d)
View(d)
colnames(d)
## your code here
unique(d$Game1Angry1)
tail(d)
View(d)
head(d$DoNotUse)
filtered_d = d |>
filter(DoNotUse != 1)
View(filtered_d)
?dplyr::filter
unique(d$DoNotUse)
filtered_d = d |>
filter(is.na(DoNotUse))
View(filtered_d)
View(d)
View(filtered_d)
filtered_d = filtered_d |>
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
View(filtered_d)
head(filtered_d$SOFMusicEnemies)
rating_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
View(rating_hyp_d)
performance_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |>
select(c("Subj","Cond"),
-contains("Game")) # your code here: remove the columns containing "Game" in the name
performance_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |>
select(c("Subject","Cond"),
-contains("Game")) # your code here: remove the columns containing "Game" in the name
View(performance_hyp_d)
performance_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |>
select(c("Subject","Cond"),
-starts_with("Game")) # your code here: remove the columns containing "Game" in the name
performance_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |>
select(-DoNotUseVideoGamePerformanceData,
-starts_with("Game")) # your code here: remove the columns containing "Game" in the name
View(performance_hyp_d)
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d |> pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
View(performance_hyp_long_d)
head(performance_hyp_long_d)
View(rating_hyp_d)
rating_hyp_long_d = rating_hyp_d |>
pivot_longer(cols=-c("Subject","Cond"),
names_to = "Measurement",
values_to = "Rating")
View(rating_hyp_long_d)
tiny_demo_mutate <- head(performance_hyp_long_d, 10)
tiny_demo_mutate
tiny_demo_mutate = tiny_demo_mutate |>
mutate(
even_score = mod(Score,2)
)
tiny_demo_mutate = tiny_demo_mutate |>
mutate(
score_plus_one = Score + 1
)
View(tiny_demo_mutate)
tiny_demo_mutate = tiny_demo_mutate |>
mutate(
score_plus_one = Score + 1,
score_minus_one = Score - 1
)
View(performance_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
#WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
#Cond = ifelse(Cond > 3, Cond - 3, Cond),
# Get rid of uninterpretable condition labels
#MusicCondition = factor(Cond, levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
#ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
#Cond = ifelse(Cond > 3, Cond - 3, Cond),
# Get rid of uninterpretable condition labels
#MusicCondition = factor(Cond, levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
?ifeles
?ifelse
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
#ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
#WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
Cond = ifelse(Cond > 3, Cond - 3, Cond),
# Get rid of uninterpretable condition labels
#MusicCondition = factor(Cond, levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(
# create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
#ConfrontationalGame = grepl("SOF", Measurement),
# creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
#WithMusic = !grepl("NoMusic|WithoutMusic", Measurement),
# Get rid of uninterpretable condition labels
#Cond = ifelse(Cond > 3, Cond - 3, Cond),
# Get rid of uninterpretable condition labels
MusicCondition = factor(Cond, levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))
)
View(performance_hyp_long_d)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
options(stringsAsFactors = FALSE)
library(tidyverse) # for data munging
library(knitr) # for kable table formating
library(haven) # import and export 'SPSS', 'Stata' and 'SAS' Files
library(readxl) # import excel files
library(lsr)
library(ggthemes)
# Just Study 1
d <- read_excel("data/S1_Subway.xlsx")
d = d %>%
mutate(
DIRECTION = as.factor(DIRECTION),
STN_NUMBER = as.factor(STN_NUMBER),
STN_NAME = factor(STN_NAME, levels = c("SPAD", "STG", "B-Y", "SHER"))
)
d %>%
group_by("FIXME") %>%
summarize(
num_obs = "FIXME",
.groups = "keep"
) %>%
ungroup()
d %>%
group_by("DIRECTION") %>%
summarize(
num_obs = "194",
.groups = "keep"
) %>%
ungroup()
View(d)
d %>%
group_by("DIRECTION") %>%
summarize(
num_obs = "202",
.groups = "keep"
) %>%
ungroup()
d %>%
group_by("DIRECTION") %>%
summarize(
num_obs = "202",
.groups = "keep"
) %>%
ungroup()
mod <- aov(data = d,
formula = DISTANCE ~ "VAR1" + "VAR2" + "VAR1"*"VAR2")
mod <- aov(data = d,
formula = DISTANCE ~ "STN_NUMBER" + "STN_NAME" + "STN_NUMBER"*"STN_NAME")
mod <- aov(data = d,
formula = DISTANCE ~ "DIRECTION" + "STN_NAME" + "DIRECTION"*"STN_NAME")
mod <- aov(data = d,
formula = DISTANCE ~ DIRECTION + STN_NAME + DIRECTION*STN_NAME)
anova(mod)
mod <- aov(data = d,
formula = DISTANCE ~ DIRECTION + STN_NAME + DIRECTION*STN_NAME)
anova(mod)
summary(mod)
View(mod)
etaSquared("mod, anova = TRUE")
etaSquared(mod, anova = TRUE)
# STEP 1: filter the data to get only St. George estimates
st.george = d %>%
filter(STN_NAME == "STG")
# STEP 2: was the estimated distance to St. George greater for eastbound or westbound travellers?
# no stats needed, just get the mean estimated distance between east and west directions
# Hint: you'll want group_by() and summarize()
st.george %>%
group_by("DIRECTION")%>%
summarize(mean_distance) = mean(DISTANCE)
# STEP 1: filter the data to get only St. George estimates
st.george = d %>%
filter(STN_NAME == "STG")
# STEP 2: was the estimated distance to St. George greater for eastbound or westbound travellers?
# no stats needed, just get the mean estimated distance between east and west directions
# Hint: you'll want group_by() and summarize()
st.george %>%
group_by("DIRECTION")%>%
summarize(mean_distance = mean(DISTANCE))
# STEP 3: Now run an aov on St. George data with distance as the response variable and direction as the explanatory variable
st.george.aov = aov(DISTANCE ~ DIRECTION, data = st.george)
summary(st.george.aov)
# STEP 4: Find the eta squared
etaSquared(st.george.aov)
## do the same for Spadina
# STEP 1: filter the data to get only St. George estimates
spadina = d %>%
filter(STN_NAME == "SPAD")
# STEP 2: was the estimated distance to St. George greater for eastbound or westbound travellers?
# no stats needed, just get the mean estimated distance between east and west directions
# Hint: you'll want group_by() and summarize()
spadina %>%
group_by("DIRECTION")%>%
summarize(mean_distance = mean(DISTANCE))
# STEP 3: Now run an aov on St. George data with distance as the response variable and direction as the explanatory variable
spadina.aov = aov(DISTANCE ~ DIRECTION, data = spadina)
summary(spadina.aov)
# STEP 4: Find the eta squared
etaSquared(spadina.aov)
## do the same for Bloor-Yonge
# STEP 1: filter the data to get only St. George estimates
bloor = d %>%
filter(STN_NAME == "B-Y")
# STEP 2: was the estimated distance to St. George greater for eastbound or westbound travellers?
# no stats needed, just get the mean estimated distance between east and west directions
# Hint: you'll want group_by() and summarize()
bloor %>%
group_by("DIRECTION")%>%
summarize(mean_distance = mean(DISTANCE))
# STEP 3: Now run an aov on St. George data with distance as the response variable and direction as the explanatory variable
bloor.aov = aov(DISTANCE ~ DIRECTION, data = bloor)
summary(bloor.aov)
# STEP 4: Find the eta squared
etaSquared(bloor.aov)
## do the same for Sherbourne
# STEP 1: filter the data to get only St. George estimates
sher = d %>%
filter(STN_NAME == "SHER")
# STEP 2: was the estimated distance to St. George greater for eastbound or westbound travellers?
# no stats needed, just get the mean estimated distance between east and west directions
# Hint: you'll want group_by() and summarize()
sher %>%
group_by("DIRECTION")%>%
summarize(mean_distance = mean(DISTANCE))
# STEP 3: Now run an aov on St. George data with distance as the response variable and direction as the explanatory variable
sher.aov = aov(DISTANCE ~ DIRECTION, data = sher)
summary(sher.aov)
# STEP 4: Find the eta squared
etaSquared(sher.aov)
